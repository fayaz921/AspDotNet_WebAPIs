// <auto-generated />
using System;
using AspDotNetCore_WebAPIs.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AspDotNetCore_WebAPIs.Migrations
{
    [DbContext(typeof(AppDBContext))]
    partial class AppDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AspDotNetCore_WebAPIs.Data.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OTP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("f98aafcb-2614-48fe-9094-a8d088154464"),
                            Contact = "030894234738",
                            Email = "fayaz573@gmail.com",
                            FirstName = "Fayaz",
                            ImageUrl = "https://www.example.com/images/fayaz.jpg",
                            LastName = "Khan",
                            OTP = "123",
                            PasswordHash = new byte[] { 179, 62, 165, 57, 99, 166, 134, 147, 251, 240, 47, 8, 22, 7, 224, 219, 144, 13, 234, 153, 68, 146, 219, 127, 194, 29, 84, 135, 33, 55, 251, 83, 241, 250, 229, 40, 208, 207, 174, 77, 87, 96, 82, 152, 126, 243, 122, 164, 49, 58, 77, 58, 197, 37, 82, 96, 220, 232, 76, 105, 211, 21, 124, 115 },
                            PasswordSalt = new byte[] { 47, 255, 149, 245, 89, 183, 198, 146, 228, 175, 233, 76, 63, 81, 205, 32, 120, 16, 236, 247, 249, 235, 130, 136, 179, 6, 141, 79, 110, 143, 149, 213, 92, 71, 125, 34, 115, 1, 226, 14, 78, 6, 202, 162, 17, 228, 136, 156, 41, 179, 27, 40, 180, 160, 44, 198, 152, 61, 179, 221, 245, 225, 80, 0, 193, 30, 31, 19, 27, 20, 193, 251, 28, 20, 175, 255, 39, 209, 41, 185, 126, 187, 241, 186, 220, 209, 232, 26, 129, 159, 80, 3, 159, 163, 205, 128, 141, 150, 160, 241, 9, 125, 107, 22, 86, 221, 111, 47, 74, 129, 250, 210, 150, 145, 170, 83, 143, 100, 208, 69, 43, 121, 6, 137, 138, 212, 221, 6 },
                            Role = 0,
                            UserName = "fayazkhan"
                        },
                        new
                        {
                            UserId = new Guid("0312c103-0e89-448c-b299-1b8aca5f4d70"),
                            Contact = "03089314932",
                            Email = "fayaz129@gmail.com",
                            FirstName = "Fayaz",
                            ImageUrl = "https://www.example.com/images/fayaz.jpg",
                            LastName = "Ahmad",
                            OTP = "1234",
                            PasswordHash = new byte[] { 179, 62, 165, 57, 99, 166, 134, 147, 251, 240, 47, 8, 22, 7, 224, 219, 144, 13, 234, 153, 68, 146, 219, 127, 194, 29, 84, 135, 33, 55, 251, 83, 241, 250, 229, 40, 208, 207, 174, 77, 87, 96, 82, 152, 126, 243, 122, 164, 49, 58, 77, 58, 197, 37, 82, 96, 220, 232, 76, 105, 211, 21, 124, 115 },
                            PasswordSalt = new byte[] { 47, 255, 149, 245, 89, 183, 198, 146, 228, 175, 233, 76, 63, 81, 205, 32, 120, 16, 236, 247, 249, 235, 130, 136, 179, 6, 141, 79, 110, 143, 149, 213, 92, 71, 125, 34, 115, 1, 226, 14, 78, 6, 202, 162, 17, 228, 136, 156, 41, 179, 27, 40, 180, 160, 44, 198, 152, 61, 179, 221, 245, 225, 80, 0, 193, 30, 31, 19, 27, 20, 193, 251, 28, 20, 175, 255, 39, 209, 41, 185, 126, 187, 241, 186, 220, 209, 232, 26, 129, 159, 80, 3, 159, 163, 205, 128, 141, 150, 160, 241, 9, 125, 107, 22, 86, 221, 111, 47, 74, 129, 250, 210, 150, 145, 170, 83, 143, 100, 208, 69, 43, 121, 6, 137, 138, 212, 221, 6 },
                            Role = 0,
                            UserName = "fayazahmad"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
